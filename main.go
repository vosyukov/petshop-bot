package main

import (
	"fmt"
	"github.com/gin-gonic/gin"
	"net/http"
	"os"
)

type AutoGenerated struct {
	AuditContext struct {
		Meta struct {
			Type string `json:"type"`
			Href string `json:"href"`
		} `json:"meta"`
		UID    string `json:"uid"`
		Moment string `json:"moment"`
	} `json:"auditContext"`
	Events []struct {
		Meta struct {
			Type string `json:"type"`
			Href string `json:"href"`
		} `json:"meta"`
		Action    string `json:"action"`
		AccountID string `json:"accountId"`
	} `json:"events"`
}

func SomeHandler(c *gin.Context) {
	var obj AutoGenerated
	if errA := c.ShouldBind(&obj); errA == nil {
		fmt.Println("CREATE handler")
		c.String(http.StatusOK, `the body should be formA`)
		// Always an error is occurred by this because c.Request.Body is EOF now.
	}

}

func main() {
	port := os.Getenv("PORT")

	if port == "" {
		port = "8000"
	}

	r := gin.Default()

	r.GET("/", func(c *gin.Context) {
		SomeHandler(c)
	})

	r.GET("/:name", func(c *gin.Context) {
		SomeHandler(c)
	})

	r.Run(fmt.Sprintf(":%s", port))
}
